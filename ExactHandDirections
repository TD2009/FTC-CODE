import cv2
import mediapipe as mp
import keyboard

mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.5, min_tracking_confidence=0.5)
cap = cv2.VideoCapture(0)

while cap.isOpened():
    ret, image = cap.read()
    image = cv2.flip(image, 1)  # Flip horizontally if needed

    if not ret:
        break

    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    hand_results = hands.process(image_rgb)
       
    if hand_results.multi_hand_landmarks:
        for hand_landmarks, handedness in zip(hand_results.multi_hand_landmarks, hand_results.multi_handedness):
            hand_label = handedness.classification[0].label

            if hand_label == "Left":
                left_thumb_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_MCP]
                left_pinky_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.PINKY_MCP]
                left_wrist = hand_landmarks.landmark[mp_hands.HandLandmark.WRIST]
                
                #Hand Direction
                if (left_thumb_mcp.y > left_wrist.y) and (left_pinky_mcp.y > left_wrist.y):
                    direction = "Down"
                elif (left_pinky_mcp.x > left_wrist.x) and (left_thumb_mcp.x > left_wrist.x):
                    direction = "Right" 
                elif (left_pinky_mcp.x < left_wrist.x) and (left_thumb_mcp.x < left_wrist.x):
                    direction = "Left"   
                else:
                    direction = "Up"

                #Palm Orientation
                if direction == "Up":
                    if left_pinky_mcp.x < left_thumb_mcp.x:
                        palm_facing = "Towards"
                    else:
                        palm_facing = "Away"
                elif direction == "Down":
                    if left_pinky_mcp.x < left_thumb_mcp.x:
                        palm_facing = "Away"
                    else:
                        palm_facing = "Towards"
                elif direction == "Left":
                    if left_pinky_mcp.y > left_wrist.y:
                        palm_facing = "Towards"
                    else:
                        palm_facing = "Away"
                elif direction == "Right":
                    if left_thumb_mcp.y > left_wrist.y:
                        palm_facing = "Towards"
                    else:
                        palm_facing = "Away"

                mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
                text = f"{hand_label}, Direction: {direction},Palm: {palm_facing}"
                cv2.putText(image, text, (int(left_wrist.x * image.shape[1]), int(left_wrist.y * image.shape[0])), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0,0,0), 1, cv2.LINE_AA)
            elif hand_label == "Right":
                right_thumb_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.THUMB_MCP]
                right_pinky_mcp = hand_landmarks.landmark[mp_hands.HandLandmark.PINKY_MCP]
                right_wrist = hand_landmarks.landmark[mp_hands.HandLandmark.WRIST]
                #Hand Direction
                if (right_thumb_mcp.y > right_wrist.y) and (right_pinky_mcp.y > right_wrist.y):
                    direction = "Down"
                elif (right_pinky_mcp.x > right_wrist.x) and (right_thumb_mcp.x > right_wrist.x):
                    direction = "Right" 
                elif (right_pinky_mcp.x < right_wrist.x) and (right_thumb_mcp.x < right_wrist.x):
                    direction = "Left"   
                else:
                    direction = "Up"
                
                #Palm Direction
                if direction == "Up":
                    if right_pinky_mcp.x < right_thumb_mcp.x:
                        palm_facing = "Away"
                    else: palm_facing = "Towards" 
                elif direction == "Down":
                    if right_pinky_mcp.x < right_thumb_mcp.x:
                        palm_facing = "Towards"
                    else: palm_facing = "Away"
                elif direction == "Left":
                    if right_pinky_mcp.y > right_wrist.y:
                        palm_facing = "Away"
                    else: palm_facing = "Towards"
                elif direction == "Right":
                    if right_thumb_mcp.y > right_wrist.y:
                        palm_facing = "Away"
                    else: palm_facing = "Towards"

                mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
                text = f"{hand_label}, Direction: {direction}, Palm: {palm_facing}"
                cv2.putText(image, text, (int(right_wrist.x * image.shape[1]), int(right_wrist.y * image.shape[0])), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 0), 1, cv2.LINE_AA)
           
    cv2.imshow('MediaPipe Detection', image)

    if (cv2.waitKey(1) & 0xFF == ord('q')) or keyboard.is_pressed("q"):
        break

cap.release()
cv2.destroyAllWindows()
